/** @format */

require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å polling –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const bot = new TelegramBot(process.env.BOT_TOKEN, {
  polling: {
    interval: 300,
    autoStart: true,
    params: {
      timeout: 10,
    },
  },
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
bot.on("polling_error", (error) => {
  console.error("Polling error:", error.message);
  if (error.message.includes("409 Conflict")) {
    console.log("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling...");
    bot.stopPolling().then(() => {
      setTimeout(() => {
        bot.startPolling();
      }, 1000);
    });
  }
});

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userDomains = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞
function isValidDomain(domain) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–º–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É
  const domainRegex =
    /^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$/;
  return domainRegex.test(domain);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞
function normalizeDomain(domain) {
  try {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    domain = domain.trim();

    // –£–±–∏—Ä–∞–µ–º http:// –∏–ª–∏ https:// –µ—Å–ª–∏ –µ—Å—Ç—å
    domain = domain.replace(/^https?:\/\//, "");

    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –≤ –¥–æ–º–µ–Ω–µ
    domain = domain.replace(/\s+/g, "");

    // –£–±–∏—Ä–∞–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    domain = domain.replace(/\/$/, "");

    // –£–±–∏—Ä–∞–µ–º www. –µ—Å–ª–∏ –µ—Å—Ç—å
    domain = domain.replace(/^www\./, "");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞
    if (!isValidDomain(domain)) {
      throw new Error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω—É");
    }

    return domain;
  } catch (error) {
    throw new Error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–æ–º–µ–Ω—É: " + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞
async function checkDomain(domain) {
  try {
    const response = await axios.get(`http://${domain}`, {
      timeout: 5000,
      validateStatus: function (status) {
        return status >= 200 && status < 600; // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      },
    });
    return true;
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
async function sendCheckResults(chatId) {
  if (!userDomains.has(chatId) || userDomains.get(chatId).size === 0) {
    return;
  }

  const domains = Array.from(userDomains.get(chatId));
  const results = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  for (const domain of domains) {
    const isAvailable = await checkDomain(domain);
    results.push({
      domain: domain,
      isAvailable: isAvailable,
    });
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ, –ø–æ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ
  results.sort((a, b) => {
    if (a.isAvailable === b.isAvailable) {
      return a.domain.localeCompare(b.domain); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø
    }
    return a.isAvailable ? 1 : -1; // –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
  });

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  let message = "üïí –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–º–µ–Ω—ñ–≤:\n\n";

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  const unavailableDomains = results.filter((r) => !r.isAvailable);
  if (unavailableDomains.length > 0) {
    message += "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–º–µ–Ω–∏:\n";
    unavailableDomains.forEach((r) => {
      message += `${r.domain}\n`;
    });
    message += "\n";
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  const availableDomains = results.filter((r) => r.isAvailable);
  if (availableDomains.length > 0) {
    message += "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–º–µ–Ω–∏:\n";
    availableDomains.forEach((r) => {
      message += `${r.domain}\n`;
    });
  }

  bot.sendMessage(chatId, message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
function startAutoCheck(chatId) {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  function getTimeUntilNextCheck() {
    const now = new Date();
    const nextCheck = new Date(now);
    nextCheck.setHours(12, 0, 0, 0);

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ—Å–ª–µ 12:00, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    if (now > nextCheck) {
      nextCheck.setDate(nextCheck.getDate() + 1);
    }

    return nextCheck.getTime() - now.getTime();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  function scheduleNextCheck() {
    const timeUntilNextCheck = getTimeUntilNextCheck();
    setTimeout(() => {
      sendCheckResults(chatId);
      scheduleNextCheck(); // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    }, timeUntilNextCheck);
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  scheduleNextCheck();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    "–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–º–µ–Ω—ñ–≤.\n\n" +
      "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n" +
      "/add domain.com - –¥–æ–¥–∞—Ç–∏ –¥–æ–º–µ–Ω –¥–æ —Å–ø–∏—Å–∫—É\n" +
      "/remove domain.com - –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–æ–º–µ–Ω –∑—ñ —Å–ø–∏—Å–∫—É\n" +
      "/list - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤\n" +
      "/check - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å—ñ –¥–æ–º–µ–Ω–∏ –≤ —Å–ø–∏—Å–∫—É\n" +
      "/autocheck - —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –æ 12:00 —â–æ–¥–Ω—è\n\n" +
      "–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ–º–µ–Ω–∏ —É –±—É–¥—å-—è–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
      "- domain.com\n" +
      "- domain . com\n" +
      "- http://domain.com\n" +
      "- https://domain.com\n" +
      "- www.domain.com\n\n" +
      "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –±—É–¥—å-—è–∫—ñ –¥–æ–º–µ–Ω–∏ –∑ –±—É–¥—å-—è–∫–∏–º–∏ TLD (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: .com, .net, .org, .ru, .ua —Ç–æ—â–æ)"
  );

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  startAutoCheck(chatId);
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞
bot.onText(/\/add (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  try {
    const domain = normalizeDomain(match[1]);

    if (!userDomains.has(chatId)) {
      userDomains.set(chatId, new Set());
    }

    userDomains.get(chatId).add(domain);
    bot.sendMessage(chatId, `–î–æ–º–µ–Ω ${domain} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É!`);
  } catch (error) {
    bot.sendMessage(chatId, `–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞
bot.onText(/\/remove (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  try {
    const domain = normalizeDomain(match[1]);

    if (userDomains.has(chatId) && userDomains.get(chatId).has(domain)) {
      userDomains.get(chatId).delete(domain);
      bot.sendMessage(chatId, `–î–æ–º–µ–Ω ${domain} –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É!`);
    } else {
      bot.sendMessage(chatId, "–î–æ–º–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É!");
    }
  } catch (error) {
    bot.sendMessage(chatId, `–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
  }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤
bot.onText(/\/list/, (msg) => {
  const chatId = msg.chat.id;

  if (!userDomains.has(chatId) || userDomains.get(chatId).size === 0) {
    bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!");
    return;
  }

  const domains = Array.from(userDomains.get(chatId)).join("\n");
  bot.sendMessage(chatId, `–í–∞—à —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤:\n${domains}`);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
bot.onText(/\/check/, async (msg) => {
  const chatId = msg.chat.id;

  if (!userDomains.has(chatId) || userDomains.get(chatId).size === 0) {
    bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!");
    return;
  }

  const domains = Array.from(userDomains.get(chatId));
  const results = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  for (const domain of domains) {
    const isAvailable = await checkDomain(domain);
    results.push({
      domain: domain,
      isAvailable: isAvailable,
    });
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ, –ø–æ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ
  results.sort((a, b) => {
    if (a.isAvailable === b.isAvailable) {
      return a.domain.localeCompare(b.domain); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø
    }
    return a.isAvailable ? 1 : -1; // –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
  });

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  let message = "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:\n\n";

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  const unavailableDomains = results.filter((r) => !r.isAvailable);
  if (unavailableDomains.length > 0) {
    message += "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–º–µ–Ω–∏:\n";
    unavailableDomains.forEach((r) => {
      message += `${r.domain}\n`;
    });
    message += "\n";
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  const availableDomains = results.filter((r) => r.isAvailable);
  if (availableDomains.length > 0) {
    message += "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–º–µ–Ω–∏:\n";
    availableDomains.forEach((r) => {
      message += `${r.domain}\n`;
    });
  }

  bot.sendMessage(chatId, message);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
bot.onText(/\/autocheck/, (msg) => {
  const chatId = msg.chat.id;
  startAutoCheck(chatId);
  bot.sendMessage(
    chatId,
    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–º–µ–Ω—ñ–≤ —É–≤—ñ–º–∫–Ω–µ–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –æ 12:00 —â–æ–¥–Ω—è."
  );
});
