/** @format */

require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
const fs = require("fs");
const path = require("path");
const http = require("http");

// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const PORT = process.env.PORT || 3000;

// –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health-check
const server = http.createServer((req, res) => {
  if (req.url === "/health") {
    res.writeHead(200, { "Content-Type": "application/json" });
    res.end(
      JSON.stringify({ status: "ok", timestamp: new Date().toISOString() })
    );
  } else {
    res.writeHead(404);
    res.end();
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, () => {
  console.log(`HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–æ–º–µ–Ω–∞–º–∏
const DOMAINS_FILE = path.join(__dirname, "domains.json");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function loadDomains() {
  try {
    if (fs.existsSync(DOMAINS_FILE)) {
      const data = fs.readFileSync(DOMAINS_FILE, "utf8");
      const domains = JSON.parse(data);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö
      if (typeof domains !== "object") {
        throw new Error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö");
      }

      // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∑–≤–∏—á–∞–π–Ω—ñ –æ–±'—î–∫—Ç–∏ –Ω–∞–∑–∞–¥ –≤ Map
      const userDomains = new Map();
      for (const [chatId, domainSet] of Object.entries(domains)) {
        if (!Array.isArray(domainSet)) {
          console.warn(
            `–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π –Ω–∞–±—ñ—Ä –¥–æ–º–µ–Ω—ñ–≤ –¥–ª—è chatId ${chatId}`
          );
          continue;
        }
        userDomains.set(chatId, new Set(domainSet));
      }

      console.log("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
      return userDomains;
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–æ–º–µ–Ω—ñ–≤:", error);
  }
  return new Map();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –≤ —Ñ–∞–π–ª
function saveDomains(userDomains) {
  try {
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
    const tempFile = `${DOMAINS_FILE}.tmp`;

    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ Map –≤ –∑–≤–∏—á–∞–π–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    const domains = {};
    for (const [chatId, domainSet] of userDomains.entries()) {
      domains[chatId] = Array.from(domainSet);
    }

    // –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Å—É—î–º–æ –≤ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
    fs.writeFileSync(tempFile, JSON.stringify(domains, null, 2));

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ –º—ñ—Å—Ç–∏—Ç—å –≤–∞–ª—ñ–¥–Ω–∏–π JSON
    const tempData = fs.readFileSync(tempFile, "utf8");
    JSON.parse(tempData); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å JSON

    // –Ø–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ, –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –Ω–∞ –º—ñ—Å—Ü–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
    fs.renameSync(tempFile, DOMAINS_FILE);

    console.log("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ");
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–æ–º–µ–Ω—ñ–≤:", error);
    // –Ø–∫—â–æ —î —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª, –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ
    if (fs.existsSync(`${DOMAINS_FILE}.tmp`)) {
      fs.unlinkSync(`${DOMAINS_FILE}.tmp`);
    }
  }
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userDomains = loadDomains();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞
function isValidDomain(domain) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–º–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É
  const domainRegex =
    /^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$/;
  return domainRegex.test(domain);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞
function normalizeDomain(domain) {
  try {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    domain = domain.trim();

    // –£–±–∏—Ä–∞–µ–º http:// –∏–ª–∏ https:// –µ—Å–ª–∏ –µ—Å—Ç—å
    domain = domain.replace(/^https?:\/\//, "");

    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –≤ –¥–æ–º–µ–Ω–µ
    domain = domain.replace(/\s+/g, "");

    // –£–±–∏—Ä–∞–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    domain = domain.replace(/\/$/, "");

    // –£–±–∏—Ä–∞–µ–º www. –µ—Å–ª–∏ –µ—Å—Ç—å
    domain = domain.replace(/^www\./, "");

    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    domain = domain.replace(/[^a-zA-Z0-9._-]/g, "");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–º–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    if (!domain) {
      throw new Error("–î–æ–º–µ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–º–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–æ—á–∫—É
    if (!domain.includes(".")) {
      throw new Error("–î–æ–º–µ–Ω –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ç–æ—á–∫—É");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–º–µ–Ω –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –∏–ª–∏ –¥–µ—Ñ–∏—Å–æ–º
    if (
      domain.startsWith(".") ||
      domain.endsWith(".") ||
      domain.startsWith("-") ||
      domain.endsWith("-")
    ) {
      throw new Error(
        "–î–æ–º–µ–Ω –Ω–µ –º–æ–∂–µ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è —Ç–æ—á–∫–æ—é –∞–±–æ –¥–µ—Ñ—ñ—Å–æ–º"
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥–≤—É—Ö —Ç–æ—á–µ–∫ –∏–ª–∏ –¥–µ—Ñ–∏—Å–æ–≤ –ø–æ–¥—Ä—è–¥
    if (domain.includes("..") || domain.includes("--")) {
      throw new Error("–î–æ–º–µ–Ω –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –¥–≤—ñ —Ç–æ—á–∫–∏ –∞–±–æ –¥–µ—Ñ—ñ—Å–∏ –ø—ñ–¥—Ä—è–¥");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –¥–æ–º–µ–Ω–∞
    const parts = domain.split(".");
    for (const part of parts) {
      if (part.length > 63) {
        throw new Error(
          "–ö–æ–∂–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –¥–æ–º–µ–Ω—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–æ—é –∑–∞ 63 —Å–∏–º–≤–æ–ª–∏"
        );
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É –¥–æ–º–µ–Ω–∞
    if (domain.length > 255) {
      throw new Error(
        "–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –¥–æ–º–µ–Ω—É –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 255 —Å–∏–º–≤–æ–ª—ñ–≤"
      );
    }

    return domain.toLowerCase();
  } catch (error) {
    throw new Error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–æ–º–µ–Ω—É: " + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞
async function checkDomain(domain) {
  try {
    const response = await axios.get(`http://${domain}`, {
      timeout: 5000,
      validateStatus: function (status) {
        return status >= 200 && status < 600; // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      },
    });
    return true;
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
async function sendCheckResults(chatId) {
  if (!userDomains.has(chatId) || userDomains.get(chatId).size === 0) {
    return;
  }

  const domains = Array.from(userDomains.get(chatId));
  const results = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  for (const domain of domains) {
    const isAvailable = await checkDomain(domain);
    results.push({
      domain: domain,
      isAvailable: isAvailable,
    });
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ, –ø–æ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ
  results.sort((a, b) => {
    if (a.isAvailable === b.isAvailable) {
      return a.domain.localeCompare(b.domain); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø
    }
    return a.isAvailable ? 1 : -1; // –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
  });

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  let message = "üïí –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–º–µ–Ω—ñ–≤:\n\n";

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  const unavailableDomains = results.filter((r) => !r.isAvailable);
  if (unavailableDomains.length > 0) {
    message += "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–º–µ–Ω–∏:\n";
    unavailableDomains.forEach((r) => {
      message += `${r.domain}\n`;
    });
    message += "\n";
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  const availableDomains = results.filter((r) => r.isAvailable);
  if (availableDomains.length > 0) {
    message += "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–º–µ–Ω–∏:\n";
    availableDomains.forEach((r) => {
      message += `${r.domain}\n`;
    });
  }

  bot.sendMessage(chatId, message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
function startAutoCheck(chatId) {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  function getTimeUntilNextCheck() {
    const now = new Date();
    const nextCheck = new Date(now);
    nextCheck.setHours(12, 0, 0, 0);

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ—Å–ª–µ 12:00, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    if (now > nextCheck) {
      nextCheck.setDate(nextCheck.getDate() + 1);
    }

    return nextCheck.getTime() - now.getTime();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  function scheduleNextCheck() {
    const timeUntilNextCheck = getTimeUntilNextCheck();
    setTimeout(() => {
      sendCheckResults(chatId);
      scheduleNextCheck(); // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    }, timeUntilNextCheck);
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  scheduleNextCheck();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async function restartBot() {
  console.log("–°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞...");
  try {
    if (bot) {
      await bot.stopPolling();
    }
    bot = await initializeBot();
    console.log("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ");
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:", error.message);
    // –ü—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(restartBot, 30000);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
async function initializeBot() {
  try {
    // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ webhook'–∏
    const tempBot = new TelegramBot(process.env.BOT_TOKEN);
    await tempBot.deleteWebHook();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    const bot = new TelegramBot(process.env.BOT_TOKEN, {
      polling: {
        interval: 300,
        autoStart: true,
        params: {
          timeout: 30,
        },
        retryAfter: 5,
      },
      request: {
        timeout: 30000,
        proxy: process.env.HTTPS_PROXY,
      },
    });

    // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ polling
    bot.on("polling_error", async (error) => {
      console.error("Polling error:", error.message);

      if (
        error.message.includes("409 Conflict") ||
        error.message.includes("ECONNRESET") ||
        error.message.includes("ETIMEDOUT")
      ) {
        console.log("–°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É polling...");
        setTimeout(restartBot, 5000);
      }
    });

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏
    bot.on("error", (error) => {
      console.error("–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞:", error.message);
      setTimeout(restartBot, 5000);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      bot.sendMessage(
        chatId,
        "–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–º–µ–Ω—ñ–≤.\n\n" +
          "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n" +
          "/add domain1.com, domain2.com - –¥–æ–¥–∞—Ç–∏ –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ –¥–æ–º–µ–Ω—ñ–≤ –¥–æ —Å–ø–∏—Å–∫—É\n" +
          "/remove domain1.com, domain2.com - –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ –¥–æ–º–µ–Ω—ñ–≤ –∑—ñ —Å–ø–∏—Å–∫—É\n" +
          "/list - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤\n" +
          "/check - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å—ñ –¥–æ–º–µ–Ω–∏ –≤ —Å–ø–∏—Å–∫—É\n" +
          "/autocheck - —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –æ 12:00 —â–æ–¥–Ω—è\n\n" +
          "–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ–º–µ–Ω–∏ —É –±—É–¥—å-—è–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
          "- domain.com\n" +
          "- domain . com\n" +
          "- http://domain.com\n" +
          "- https://domain.com\n" +
          "- www.domain.com\n\n" +
          "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –±—É–¥—å-—è–∫—ñ –¥–æ–º–µ–Ω–∏ –∑ –±—É–¥—å-—è–∫–∏–º–∏ TLD (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: .com, .net, .org, .ru, .ua —Ç–æ—â–æ)"
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
      startAutoCheck(chatId);
    });

    bot.onText(/\/add/, (msg) => {
      const chatId = msg.chat.id;
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const text = msg.text;
        console.log("–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", text);

        // –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /add –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        const domainsText = text.replace(/^\/add\s*/, "").trim();
        console.log("–¢–µ–∫—Å—Ç –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏:", domainsText);

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–æ–º–µ–Ω—ã –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π
        const domains = domainsText
          .split(/[\n,]+/) // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π
          .map((d) => d.trim()) // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
          .filter((d) => d.length > 0); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

        console.log("–†–æ–∑–¥—ñ–ª–µ–Ω—ñ –¥–æ–º–µ–Ω–∏ (—Å–∏—Ä–∏–π —Å–ø–∏—Å–æ–∫):", domains);

        if (!userDomains.has(chatId)) {
          userDomains.set(chatId, new Set());
          console.log("–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –Ω–∞–±—ñ—Ä –¥–æ–º–µ–Ω—ñ–≤ –¥–ª—è chatId:", chatId);
        }

        const addedDomains = [];
        const errors = [];

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω
        for (const domain of domains) {
          try {
            console.log("–°–ø—Ä–æ–±–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–º–µ–Ω—É:", domain);
            const normalizedDomain = normalizeDomain(domain);
            console.log("–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–æ–º–µ–Ω:", normalizedDomain);

            userDomains.get(chatId).add(normalizedDomain);
            addedDomains.push(normalizedDomain);
            console.log("–î–æ–º–µ–Ω —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ:", normalizedDomain);
          } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–æ–º–µ–Ω—É:", domain, error.message);
            errors.push(`${domain}: ${error.message}`);
          }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–º–µ–Ω—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        saveDomains(userDomains);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        let message = "";
        if (addedDomains.length > 0) {
          message += `‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ–º–µ–Ω—ñ–≤: ${addedDomains.length}\n`;
          message += addedDomains.join("\n") + "\n\n";
        }

        if (errors.length > 0) {
          message += `‚ùå –ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ:\n`;
          message += errors.join("\n");
        }

        console.log("–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", message);
        bot.sendMessage(chatId, message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω—É");
      } catch (error) {
        console.error("–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ–º–µ–Ω—ñ–≤:", error);
        bot.sendMessage(chatId, `–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
      }
    });

    bot.onText(/\/remove/, (msg) => {
      const chatId = msg.chat.id;
      try {
        const text = msg.text;
        const domainsText = text.replace(/^\/remove\s*/, "").trim();
        const domains = domainsText
          .split(/[\n,]+/)
          .map((d) => d.trim())
          .filter((d) => d.length > 0);

        if (!userDomains.has(chatId)) {
          bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!");
          return;
        }

        const removedDomains = [];
        const notFoundDomains = [];

        for (const domain of domains) {
          try {
            const normalizedDomain = normalizeDomain(domain);
            if (userDomains.get(chatId).has(normalizedDomain)) {
              userDomains.get(chatId).delete(normalizedDomain);
              removedDomains.push(normalizedDomain);
            } else {
              notFoundDomains.push(normalizedDomain);
            }
          } catch (error) {
            notFoundDomains.push(`${domain}: ${error.message}`);
          }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–º–µ–Ω—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        saveDomains(userDomains);

        let message = "";
        if (removedDomains.length > 0) {
          message += `‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –¥–æ–º–µ–Ω—ñ–≤: ${removedDomains.length}\n`;
          message += removedDomains.join("\n") + "\n\n";
        }

        if (notFoundDomains.length > 0) {
          message += `‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É:\n`;
          message += notFoundDomains.join("\n");
        }

        bot.sendMessage(
          chatId,
          message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω—É"
        );
      } catch (error) {
        bot.sendMessage(chatId, `–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
      }
    });

    bot.onText(/\/list/, (msg) => {
      const chatId = msg.chat.id;

      if (!userDomains.has(chatId) || userDomains.get(chatId).size === 0) {
        bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!");
        return;
      }

      const domains = Array.from(userDomains.get(chatId)).join("\n");
      bot.sendMessage(chatId, `–í–∞—à —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤:\n${domains}`);
    });

    bot.onText(/\/check/, async (msg) => {
      const chatId = msg.chat.id;

      if (!userDomains.has(chatId) || userDomains.get(chatId).size === 0) {
        bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!");
        return;
      }

      const domains = Array.from(userDomains.get(chatId));
      const results = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (const domain of domains) {
        const isAvailable = await checkDomain(domain);
        results.push({
          domain: domain,
          isAvailable: isAvailable,
        });
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ, –ø–æ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ
      results.sort((a, b) => {
        if (a.isAvailable === b.isAvailable) {
          return a.domain.localeCompare(b.domain); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø
        }
        return a.isAvailable ? 1 : -1; // –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:\n\n";

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
      const unavailableDomains = results.filter((r) => !r.isAvailable);
      if (unavailableDomains.length > 0) {
        message += "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–º–µ–Ω–∏:\n";
        unavailableDomains.forEach((r) => {
          message += `${r.domain}\n`;
        });
        message += "\n";
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
      const availableDomains = results.filter((r) => r.isAvailable);
      if (availableDomains.length > 0) {
        message += "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–º–µ–Ω–∏:\n";
        availableDomains.forEach((r) => {
          message += `${r.domain}\n`;
        });
      }

      bot.sendMessage(chatId, message);
    });

    bot.onText(/\/autocheck/, (msg) => {
      const chatId = msg.chat.id;
      startAutoCheck(chatId);
      bot.sendMessage(
        chatId,
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–º–µ–Ω—ñ–≤ —É–≤—ñ–º–∫–Ω–µ–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –æ 12:00 —â–æ–¥–Ω—è."
      );
    });

    return bot;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞:", error.message);
    throw error;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
let bot;
initializeBot()
  .then((initializedBot) => {
    bot = initializedBot;
    console.log("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
  })
  .catch((error) => {
    console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–æ—Ç–∞:", error.message);
    // –ó–∞–º—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏, –ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(restartBot, 30000);
  });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
async function gracefulShutdown() {
  console.log("–ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...");

  try {
    // –ó—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞
    if (bot) {
      console.log("–ó—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞...");
      await bot.stopPolling();
      console.log("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ");
    }

    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ HTTP-—Å–µ—Ä–≤–µ—Ä
    console.log("–ó–∞–∫—Ä–∏–≤–∞—î–º–æ HTTP —Å–µ—Ä–≤–µ—Ä...");
    await new Promise((resolve, reject) => {
      server.close((err) => {
        if (err) {
          console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞:", err);
          reject(err);
        } else {
          console.log("HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ");
          resolve();
        }
      });
    });

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º
    console.log("–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ...");
    saveDomains(userDomains);
    console.log("–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ");

    console.log("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —É—Å–ø—ñ—à–Ω–µ");
    process.exit(0);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏:", error);
    process.exit(1);
  }
}

// –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
process.on("SIGTERM", () => {
  console.log("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGTERM");
  gracefulShutdown();
});

process.on("SIGINT", () => {
  console.log("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGINT");
  gracefulShutdown();
});

// –û–±—Ä–æ–±–∫–∞ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
process.on("uncaughtException", (error) => {
  console.error("–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", error);
  // –ó–∞–º—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏, –ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
  setTimeout(restartBot, 5000);
});

process.on("unhandledRejection", (reason, promise) => {
  console.error("–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –≤—ñ–¥–º–æ–≤–∞ –ø—Ä–æ–º—ñ—Å—É:", reason);
  // –ó–∞–º—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏, –ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
  setTimeout(restartBot, 5000);
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω–∞—Ö
function autoSave() {
  saveDomains(userDomains);
}

// –î–æ–¥–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
setInterval(autoSave, 5 * 60 * 1000);
