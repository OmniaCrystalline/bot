/** @format */

require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userDomains = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞
function isValidDomain(domain) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–º–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É
  const domainRegex =
    /^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$/;
  return domainRegex.test(domain);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞
function normalizeDomain(domain) {
  try {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    domain = domain.trim();

    // –£–±–∏—Ä–∞–µ–º http:// –∏–ª–∏ https:// –µ—Å–ª–∏ –µ—Å—Ç—å
    domain = domain.replace(/^https?:\/\//, "");

    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –≤ –¥–æ–º–µ–Ω–µ
    domain = domain.replace(/\s+/g, "");

    // –£–±–∏—Ä–∞–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    domain = domain.replace(/\/$/, "");

    // –£–±–∏—Ä–∞–µ–º www. –µ—Å–ª–∏ –µ—Å—Ç—å
    domain = domain.replace(/^www\./, "");

    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏ –∏ –¥–µ—Ñ–∏—Å—ã
    domain = domain.replace(/[^a-zA-Z0-9.-]/g, "");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–º–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    if (!domain) {
      throw new Error("–î–æ–º–µ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–º–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–æ—á–∫—É
    if (!domain.includes(".")) {
      throw new Error("–î–æ–º–µ–Ω –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ç–æ—á–∫—É");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–º–µ–Ω –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –∏–ª–∏ –¥–µ—Ñ–∏—Å–æ–º
    if (
      domain.startsWith(".") ||
      domain.endsWith(".") ||
      domain.startsWith("-") ||
      domain.endsWith("-")
    ) {
      throw new Error(
        "–î–æ–º–µ–Ω –Ω–µ –º–æ–∂–µ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è —Ç–æ—á–∫–æ—é –∞–±–æ –¥–µ—Ñ—ñ—Å–æ–º"
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥–≤—É—Ö —Ç–æ—á–µ–∫ –∏–ª–∏ –¥–µ—Ñ–∏—Å–æ–≤ –ø–æ–¥—Ä—è–¥
    if (domain.includes("..") || domain.includes("--")) {
      throw new Error("–î–æ–º–µ–Ω –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –¥–≤—ñ —Ç–æ—á–∫–∏ –∞–±–æ –¥–µ—Ñ—ñ—Å–∏ –ø—ñ–¥—Ä—è–¥");
    }

    return domain.toLowerCase();
  } catch (error) {
    throw new Error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–æ–º–µ–Ω—É: " + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞
async function checkDomain(domain) {
  try {
    const response = await axios.get(`http://${domain}`, {
      timeout: 5000,
      validateStatus: function (status) {
        return status >= 200 && status < 600; // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      },
    });
    return true;
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
async function sendCheckResults(chatId) {
  if (!userDomains.has(chatId) || userDomains.get(chatId).size === 0) {
    return;
  }

  const domains = Array.from(userDomains.get(chatId));
  const results = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  for (const domain of domains) {
    const isAvailable = await checkDomain(domain);
    results.push({
      domain: domain,
      isAvailable: isAvailable,
    });
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ, –ø–æ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ
  results.sort((a, b) => {
    if (a.isAvailable === b.isAvailable) {
      return a.domain.localeCompare(b.domain); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø
    }
    return a.isAvailable ? 1 : -1; // –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
  });

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  let message = "üïí –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–º–µ–Ω—ñ–≤:\n\n";

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  const unavailableDomains = results.filter((r) => !r.isAvailable);
  if (unavailableDomains.length > 0) {
    message += "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–º–µ–Ω–∏:\n";
    unavailableDomains.forEach((r) => {
      message += `${r.domain}\n`;
    });
    message += "\n";
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  const availableDomains = results.filter((r) => r.isAvailable);
  if (availableDomains.length > 0) {
    message += "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–º–µ–Ω–∏:\n";
    availableDomains.forEach((r) => {
      message += `${r.domain}\n`;
    });
  }

  bot.sendMessage(chatId, message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
function startAutoCheck(chatId) {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  function getTimeUntilNextCheck() {
    const now = new Date();
    const nextCheck = new Date(now);
    nextCheck.setHours(12, 0, 0, 0);

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ—Å–ª–µ 12:00, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    if (now > nextCheck) {
      nextCheck.setDate(nextCheck.getDate() + 1);
    }

    return nextCheck.getTime() - now.getTime();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  function scheduleNextCheck() {
    const timeUntilNextCheck = getTimeUntilNextCheck();
    setTimeout(() => {
      sendCheckResults(chatId);
      scheduleNextCheck(); // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    }, timeUntilNextCheck);
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  scheduleNextCheck();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
async function initializeBot() {
  try {
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ webhook'–∏
    const tempBot = new TelegramBot(process.env.BOT_TOKEN);
    await tempBot.deleteWebHook();

    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    const bot = new TelegramBot(process.env.BOT_TOKEN, {
      polling: {
        interval: 300,
        autoStart: true,
        params: {
          timeout: 10,
        },
      },
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
    bot.on("polling_error", async (error) => {
      console.error("Polling error:", error.message);
      if (error.message.includes("409 Conflict")) {
        console.log("–°–ø—Ä–æ–±–∞ –≤–∏—Ä—ñ—à–∏—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç polling...");
        try {
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π polling
          await bot.stopPolling();
          // –£–¥–∞–ª—è–µ–º webhook
          await bot.deleteWebHook();
          // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
          await new Promise((resolve) => setTimeout(resolve, 2000));
          // –ó–∞–ø—É—Å–∫–∞–µ–º polling –∑–∞–Ω–æ–≤–æ
          await bot.startPolling();
          console.log("Polling —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ");
        } catch (restartError) {
          console.error(
            "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É polling:",
            restartError.message
          );
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      bot.sendMessage(
        chatId,
        "–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–º–µ–Ω—ñ–≤.\n\n" +
          "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n" +
          "/add domain1.com, domain2.com - –¥–æ–¥–∞—Ç–∏ –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ –¥–æ–º–µ–Ω—ñ–≤ –¥–æ —Å–ø–∏—Å–∫—É\n" +
          "/remove domain1.com, domain2.com - –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ –¥–æ–º–µ–Ω—ñ–≤ –∑—ñ —Å–ø–∏—Å–∫—É\n" +
          "/list - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤\n" +
          "/check - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å—ñ –¥–æ–º–µ–Ω–∏ –≤ —Å–ø–∏—Å–∫—É\n" +
          "/autocheck - —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –æ 12:00 —â–æ–¥–Ω—è\n\n" +
          "–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ–º–µ–Ω–∏ —É –±—É–¥—å-—è–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
          "- domain.com\n" +
          "- domain . com\n" +
          "- http://domain.com\n" +
          "- https://domain.com\n" +
          "- www.domain.com\n\n" +
          "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –±—É–¥—å-—è–∫—ñ –¥–æ–º–µ–Ω–∏ –∑ –±—É–¥—å-—è–∫–∏–º–∏ TLD (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: .com, .net, .org, .ru, .ua —Ç–æ—â–æ)"
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
      startAutoCheck(chatId);
    });

    bot.onText(/\/add (.+)/, (msg, match) => {
      const chatId = msg.chat.id;
      try {
        console.log("–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /add –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", match[1]);

        // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –¥–æ–º–µ–Ω—ã –ø–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏
        const domains = match[1]
          .split(/[,\n]/) // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏
          .map((d) => d.trim()) // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
          .filter((d) => d.length > 0); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

        console.log("–†–æ–∑–¥—ñ–ª–µ–Ω—ñ –¥–æ–º–µ–Ω–∏:", domains);

        if (!userDomains.has(chatId)) {
          userDomains.set(chatId, new Set());
          console.log("–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –Ω–∞–±—ñ—Ä –¥–æ–º–µ–Ω—ñ–≤ –¥–ª—è chatId:", chatId);
        }

        const addedDomains = [];
        const errors = [];

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω
        for (const domain of domains) {
          try {
            console.log("–°–ø—Ä–æ–±–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–º–µ–Ω—É:", domain);
            const normalizedDomain = normalizeDomain(domain);
            console.log("–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–æ–º–µ–Ω:", normalizedDomain);

            userDomains.get(chatId).add(normalizedDomain);
            addedDomains.push(normalizedDomain);
            console.log("–î–æ–º–µ–Ω —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ:", normalizedDomain);
          } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–æ–º–µ–Ω—É:", domain, error.message);
            errors.push(`${domain}: ${error.message}`);
          }
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        let message = "";
        if (addedDomains.length > 0) {
          message += `‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ–º–µ–Ω—ñ–≤: ${addedDomains.length}\n`;
          message += addedDomains.join("\n") + "\n\n";
        }

        if (errors.length > 0) {
          message += `‚ùå –ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ:\n`;
          message += errors.join("\n");
        }

        console.log("–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", message);
        bot.sendMessage(chatId, message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω—É");
      } catch (error) {
        console.error("–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ–º–µ–Ω—ñ–≤:", error);
        bot.sendMessage(chatId, `–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
      }
    });

    bot.onText(/\/remove (.+)/, (msg, match) => {
      const chatId = msg.chat.id;
      try {
        // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –¥–æ–º–µ–Ω—ã –ø–æ –∑–∞–ø—è—Ç–æ–π
        const domains = match[1].split(",").map((d) => d.trim());

        if (!userDomains.has(chatId)) {
          bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!");
          return;
        }

        const removedDomains = [];
        const notFoundDomains = [];

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω
        for (const domain of domains) {
          try {
            const normalizedDomain = normalizeDomain(domain);
            if (userDomains.get(chatId).has(normalizedDomain)) {
              userDomains.get(chatId).delete(normalizedDomain);
              removedDomains.push(normalizedDomain);
            } else {
              notFoundDomains.push(normalizedDomain);
            }
          } catch (error) {
            notFoundDomains.push(`${domain}: ${error.message}`);
          }
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        let message = "";
        if (removedDomains.length > 0) {
          message += `‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –¥–æ–º–µ–Ω—ñ–≤: ${removedDomains.length}\n`;
          message += removedDomains.join("\n") + "\n\n";
        }

        if (notFoundDomains.length > 0) {
          message += `‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É:\n`;
          message += notFoundDomains.join("\n");
        }

        bot.sendMessage(
          chatId,
          message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω—É"
        );
      } catch (error) {
        bot.sendMessage(chatId, `–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
      }
    });

    bot.onText(/\/list/, (msg) => {
      const chatId = msg.chat.id;

      if (!userDomains.has(chatId) || userDomains.get(chatId).size === 0) {
        bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!");
        return;
      }

      const domains = Array.from(userDomains.get(chatId)).join("\n");
      bot.sendMessage(chatId, `–í–∞—à —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤:\n${domains}`);
    });

    bot.onText(/\/check/, async (msg) => {
      const chatId = msg.chat.id;

      if (!userDomains.has(chatId) || userDomains.get(chatId).size === 0) {
        bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!");
        return;
      }

      const domains = Array.from(userDomains.get(chatId));
      const results = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (const domain of domains) {
        const isAvailable = await checkDomain(domain);
        results.push({
          domain: domain,
          isAvailable: isAvailable,
        });
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ, –ø–æ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ
      results.sort((a, b) => {
        if (a.isAvailable === b.isAvailable) {
          return a.domain.localeCompare(b.domain); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø
        }
        return a.isAvailable ? 1 : -1; // –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:\n\n";

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
      const unavailableDomains = results.filter((r) => !r.isAvailable);
      if (unavailableDomains.length > 0) {
        message += "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–º–µ–Ω–∏:\n";
        unavailableDomains.forEach((r) => {
          message += `${r.domain}\n`;
        });
        message += "\n";
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
      const availableDomains = results.filter((r) => r.isAvailable);
      if (availableDomains.length > 0) {
        message += "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–º–µ–Ω–∏:\n";
        availableDomains.forEach((r) => {
          message += `${r.domain}\n`;
        });
      }

      bot.sendMessage(chatId, message);
    });

    bot.onText(/\/autocheck/, (msg) => {
      const chatId = msg.chat.id;
      startAutoCheck(chatId);
      bot.sendMessage(
        chatId,
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–º–µ–Ω—ñ–≤ —É–≤—ñ–º–∫–Ω–µ–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –æ 12:00 —â–æ–¥–Ω—è."
      );
    });

    return bot;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞:", error.message);
    throw error;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
let bot;
initializeBot()
  .then((initializedBot) => {
    bot = initializedBot;
    console.log("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
  })
  .catch((error) => {
    console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–æ—Ç–∞:", error.message);
    process.exit(1);
  });
